<?xml version="1.0" encoding="UTF-8" ?>

<!--
Normally we'd collect information about your projects using an online form,
but the CS web-site is being retired and SAFE isn't up to the task yet.  As 
an interim solution the idea is that

- you complete this XML file, replacing the template content but retaining
  the structure, and submit it via SAFE,
  then
- later, and hopefully (semi-)automatically, we'll import it into SAFE for 
  you in order to drive the assessment process.

This submission represents a draft specification.  Completion of the content
below is an exercise in formative assessment only: it is a way to a) explore
the viability of initial ideas, and refine these where need be, and b) allow
provision of feedback.  We therefore want a clear, concise specification of 
no more than one page of A4. 

If in doubt about the content of the longer sections, make sure you read the
unit handbook at

https://www.cs.bris.ac.uk/Teaching/Resources/COMSM0111/handbook.pdf
-->

 <project>

<!-- 
In this section, we want

1. your CS user name 
   (e.g., "jl8971"),
2. your project title (even if you change this later),
3. the full name of                your Supervisor within  CS,
   (e.g., "Dan Page"),
4. whether said Supervisor is  confirmed or tentative,
5. the full name (and affiliation) any  Advisor(s) outside CS 
   (e.g., an industrial collaborator such as "Fred Bloggs, IBM"),
6. whether said Advisor(s) are confirmed or tentative,
   and
7. whether your project is of type enterprise or research (which implies you
   are also registered on the associated "sister unit").
-->

  <admin>
               <username>dm1905</username>
                  <title>Dictionary Matching with Fingerprints: Theory and Practice</title>

             <supervisor>Raphael Clifford</supervisor>
   <confirmed_supervisor>yes</confirmed_supervisor>

                <advisor>Benjamin Sach</advisor>
      <confirmed_advisor>yes</confirmed_advisor>

                   <type>research</type>
 </admin>

<!-- 
In this section we want a high-level description of the project; the content 
might include a description of what the central problem is, and any previous 
or related work done to solve it.
-->

  <description>
  A big push at the moment is for space-efficient computation. Intuitively when performing pattern matching, one might expect you to need to at least store a copy of the whole pattern. In reality, this was proven wrong in 2009, when Benny Porat and Ely Porat proved that you could use hash functions to do this in less space, with a small probability of error. This was implemented by myself over this summer as a project for the Algorithms Team.

  Since then, a big question has been to figure out what related problems can also be solved with less space than it takes to store the pattern. In 2013, Markus Jalsenius, Benny Porat and Benjamin Sach showed how to solve a more sophisticated problem known as parameterised matching in less space.

  Dictionary matching is another related problem, where we are trying to match multiple patterns over a single text. Here, this issue of saving space is even more pressing, but there is currently no space-efficient published solution.
 </description>

<!-- 
In this section we want a low(er)-level outline of exactly what you will to 
do within the project.  The easiest way to structure this is as a concise, 
focused set of bullet points outlining a) the high-level objective(s), and 
b) concrete, step-by-step aims that will move you towards this.
-->

  <objectives>
  Porat and Porat in 2009[1] showed that you could do pattern matching in logarithmic time per character and logarithmic space. This was improved in 2011 by Breslauer and Galil[2] to constant time per character with the same amount of space.

  The best published algorithm for dictionary matching so far is the Aho-Corasick String Matching Algorithm[3], which requires a linear amount of space and runs in constant time per character.

  The objectives for this project are to:

  -Improve the space complexity by utilising hashing in the same style as Porat and Porat's algorithm.
  -Implement this algorithm in practice.
  -Analyse and compare to current the Aho-Corasick algorithm.
  -Optimise the algorithm for better time and space efficiency in practice.

  [1] Benny Porat and Ely Porat - Exact And Approximate Pattern Matching In The Streaming Model
  [2] Dany Breslauer and Zvi Galil - Real-Time Streaming String-Matching
  [3] Alfred V. Aho and Margaret J. Corasick - Efficient string matching: An aid to bibliographic search
 </objectives>

<!-- 
In this section we want a draft plan for execution of the outlined aims and 
objectives: this can include time scales, but also aspects of resource and 
risk/contingency planning.
-->

  <plan>
  Week 1:
    -Gather data for testing performance.
    -Investigate current implementations of the Aho-Corasick algorithm.
  Weeks 1-2:
    -Implement the Aho-Corasick algorithm.
  Weeks 3-5:
    -Implement a new algorithm for dictionary matching.
  Week 6:
    Buffer Week
  Week 7:
    -Start performance analysis of the new algorithm against current implementations.
    -Design poster for the project fair.
  Week 8:
    -Further performance analysis.
  Weeks 8-9:
    -Investigate optimisations.
  Weeks 9-11:
    -Wrap up.
    -Write the report and research proposal.
 </plan>

</project>
